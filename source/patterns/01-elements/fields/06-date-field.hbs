---
description: >
  HTML5 `<input type="date">` with a `<select>`-based fallback for un-fancy
  browsers. Fallback markup is contained with an HTML comment, so it can be
  easily customized per instance. Fallback will update the original element
  value on `change` events. `min` and `max` values are required on the default
  element to use the fallback.
---

<div class="js-datefield">
  <input class="form-control js-datefield-default" id="signupDOB" type="date" min="1900-01-01" max="1997-12-31" />
  <div class="js-datefield-template hidden" aria-hidden="true">
    {{! date fallback template (do not remove HTML comments) }}
    <!-- <div class="arrange arrange-gutter arrange-equal js-datefield-fallback">
      <div class="arrange-fit">
        <select class="form-control js-datefield-month">
          <option selected disabled>Month</option>
          <option value="1">Jan</option>
          <option value="2">Feb</option>
          <option value="3">Mar</option>
          <option value="4">Apr</option>
          <option value="5">May</option>
          <option value="6">Jun</option>
          <option value="7">Jul</option>
          <option value="8">Aug</option>
          <option value="9">Sep</option>
          <option value="10">Oct</option>
          <option value="11">Nov</option>
          <option value="12">Dec</option>
        </select>
      </div>
      <div class="arrange-fit">
        <select class="form-control js-datefield-day">
          <option selected disabled>Day</option>
        </select>
      </div>
      <div class="arrange-fit">
        <select class="form-control js-datefield-year">
          <option selected disabled>Year</option>
        </select>
      </div>
    </div> -->
    {{! /date fallback template }}
  </div>
</div>

<script>
$(function(){

  // use fallback when date input is not supported
  var useFallback = !Modernizr.inputtypes.date;

  // helper for getting number of days in month
  function getDaysInMonth (month, year) {
    // generous defaults (assume leap year)
    var days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    // if month is not provided, default to January
    var index = month ? month - 1 : 0;
    // if year is provided, correct leap year if there isn't one
    if (year && new Date(year, 1, 29).getMonth() != 1) {
      days[1] = 28;
    }
    // return value
    return days[index];
  }

  // helper for updating day options based on optional month and year
  function updateDayOptions ($element, month, year) {
    // if month and year are provided, parse them first
    if (month) month = parseInt(month);
    if (year) year = parseInt(year);

    // determine max days to render based on month and year
    var max = getDaysInMonth(month, year);
    // find options that are not disabled (label) options
    var $options = $element.find('option:not(:disabled)');

    if ($options.length < max) {
      // if there are too few options, render the remainder
      for (var i = $options.length + 1; i <= max; i++) {
        $element.append('<option>' + i + '</option>');
      }
    } else if ($options.length > max) {
      // if there are too many options, remove the remainder
      var $remainder = $options.slice(max).remove();
      // if one of the removed options was the current selected value, move
      // the selection to the last possible day
      if ($remainder.filter(':selected').length) {
        $options.eq(max - 1).attr('selected', 'selected');
      }
    }
  }

  // for each js-datefield occurrence
  $('.js-datefield').each(function(){
    // store elements and instantiate variables
    var $element = $(this);
    var $default = $element.find('.js-datefield-default');
    var $template = $element.find('.js-datefield-template');
    var $fallback, $month, $day, $year, minYear, maxYear, i;

    if (useFallback) {
      // hide default field
      $default.hide();

      // replace template container with the fallback itself
      $template.uncomment();
      $fallback = $template.find('.js-datefield-fallback');
      $fallback.unwrap();

      // store the individual fallback fields
      $month = $fallback.find('.js-datefield-month');
      $day = $fallback.find('.js-datefield-day');
      $year = $fallback.find('.js-datefield-year');

      // build the date options
      updateDayOptions($day);

      // build the year options based on min and max
      minYear = $default.attr('min').split('-')[0];
      maxYear = $default.attr('max').split('-')[0];
      for (i = maxYear; i >= minYear; i--) {
        $year.append('<option>' + i + '</option>');
      }

      // adjust days when month or year changes
      $month.add($year).on('change.vse.dateMonthOrYear', function () {
        updateDayOptions($day, $month.val(), $year.val());
      });

      // when the date changes, update the default input value
      $day.add($month).add($year).on('change.vse.dateAll', function () {
        var fullDate = [$year.val(), $month.val(), $day.val()];
        var val, i;
        // loop through date portions
        for (i = 0; i < fullDate.length; i++) {
          val = fullDate[i];
          // if any date portions are undefined or null or zero, clear the
          // current date value and don't bother doing any more
          if (!val) {
            $default.val('');
            return;
          }
          // add a leading zero for short values
          if (val.length < 2) {
            fullDate[i] = '0' + val;
          }
        }
        // join the full date and update the default input value
        fullDate = fullDate.join('-');
        $default.val(fullDate);
      });

    } else {
      // if date inputs are supported, we can just remove the template to keep
      // the markup a little cleaner
      $template.remove();
    }
  });

});
</script>
