//= Options

$star-size-base: 16px !default;
$star-rating-min: 0 !default;
$star-rating-max: 5 !default;
$star-rating-step: .5 !default;

//= Sizing mixin

// .stars on its own will respect the parent font-size, but you can also set
// sizes overtly if that's your jam

@mixin star-size (
  $star-size: $star-size-base,
  $relative-to: $font-size-base,
  $star-max: $star-rating-max
) {
  @if $relative-to {
    $star-size: ($star-size / $font-size-base * 1em);
  }
  height: $star-size;
  width: $star-size * $star-max;
}

//= Core component

.stars {
  display: inline-block;
  overflow: hidden;
  vertical-align: middle;
  @include star-size();
  @include user-select(none);

  &:before,
  &:after {
    background-repeat: repeat-x;
    background-size: auto 100%;
    content: '';
    display: block;
    float: left;
    height: 100%;
  }

  &:before {
    background-image: url(/images/star.svg);
    background-position: left;
    width: 0;
  }

  &:after {
    background-image: url(/images/star-empty.svg);
    background-position: right;
    width: 100%;
  }
}

//= Sizing

@for $i from $star-rating-min through ($star-rating-max / $star-rating-step) {
  $step: ($i * $star-rating-step);
  $step-string: str-replace('#{$step}', '.', '-');
  $step-percentage: ($step / $star-rating-max * 100%);

  .stars-#{$step-string} {
    &:before {
      width: $step-percentage;
    }

    &:after {
      width: (100% - $step-percentage);
    }
  }
}

//= Size modifiers

.stars-lg {
  @include star-size(22px);
}

// = Editable variation

.stars-editable {
  cursor: pointer;

  &.editing:before {
    background-image: url(/images/star-editing.svg);
  }
}
